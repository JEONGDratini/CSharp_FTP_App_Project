기본적인 생성방식은 자바와 크게 다르지 않다. ex) 생성자, 필드, 메서드, 속성, 등

어떤 class에서 method만 따로 빼서 사용하고 싶다면,
 해당 method를 static키워드를 통해 선언해 class.method(); 같은 방식으로 호출해 사용할 수 있다.
 다른 방법으로는 new class().method(); 같은 방식으로 축약형으로 객체를 생성한 후 해당 객체의 method를 가져오는 방법이 있다.

인터페이스는 기본적인 구현은 불가능 하지만, 타 모듈이나 메서드(상속같은 클래스 관계가 없는경우)에서도 해당 인터페이스의 메서드를 호출할 수 있다.
또한, 인터페이스는 여러개의 base class를 가질 수 있다.

------------------------------------------------------------------------------------------
ex)sorting하는 인터페이스 예시
void Sort(List<object> data, IComparer c) {}

class NameComparer : IComparer {...}
class IdComparer : IComparer {...}

이경우에 어떤 클래스의 메서드를 사용할 것인지 골라쓸 수 있다.
Sort(data, new NameComparer());
Sort(data, new IdComparer());

인스턴스 : 클래스에서 생성된 객체.
인스턴스화 : 클래스로부터 객체를 생성하는 것.
------------------------------------------------------------------------------------------

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
속성 자동구현(get, set의의) <----> public 제한자
	get, set을 사용해서 구현하게 되면 public 필드로 구현하는 것과는 달리 바인딩(WinForm의 컨트롤이나 원소를 Data에 연결시키는 것)
	이 가능하다.
	또한 public 제한자로 선언을 하게 되면 getter와 setter 중 1개를 선택할 수 없다.(쓰고 읽기의 구분이 X)
	하지만 속성자동구현은 이것이 가능하다.
	그에 더해서 breakpoint를 걸어 debuging에도 활용할 수 있다. 

