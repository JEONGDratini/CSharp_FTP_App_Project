Delegate

Delegate는 메서드를 패러미터처럼 다른 함수에 넘길 수 있도록 해준다.


------------------------------------------------------------------------------------
예제 코드)
class Program
{
    static void Main(string[] args)
    {
        new Program().Test();
    }

    // 델리게이트 정의
    delegate int MyDelegate(string s);

    void Test()
    {
        //델리게이트 객체 생성
        MyDelegate m = new MyDelegate(StringToInt);

        //델리게이트 객체를 메서드로 전달
        Run(m);
    }

    // 델리게이트 대상이 되는 메서드
    int StringToInt(string s)
    {
        return int.Parse(s);
    }

    // 델리게이트를 전달 받는 메서드
    void Run(MyDelegate m)
    {
        // 델리게이트로부터 메서드 실행
        int i = m("123");

        Console.WriteLine(i);
    }
}

------------------------------------------------------------------------------------
결과 :
i = 123

출력 :
123

========================================================
Invoke
컨트롤의 본인 스레드가 아닌 다른 스레드를 이용하여 해당 컨트롤 객체를 동기식으로 실행한다.

C#에서 화면을 그리는 스레드는 1개만 존재한다. 
 그래서 다른 스레드에서 화면을 그리려고 해당 자원에 직접 접근해버리면 문제가 생길 수 있으므로 이를 대처하기위해 사용한다.
 그런 문제를 피하기 위해서는 다른 스레드가 화면 그리는 스레드에게 메시지를 전달해야하는데, 이때 쓰는 것이 invoke다.

Invoke를 하는 방법에는 Invoke()랑 BeginInvoke()가 있는데, Invoke()는 동기 방식이고 BeginInvoke()는 비동기 방식이다.
그래서 호출에 대한 반환값이 필요한 경우에만 Invoke를 쓰는게 좋다.

==================================================================
delegate 추가 메모
delegate는 c, c++의 함수포인터와 비슷한 개념이다. 해당 파라미터와 리턴타입에 대한 정의를 하면, 같은 형식의 메서드를 서로 호환해서
불러 쓸 수 있는 기능이기 때문이다.

예시 : CSharp_Tutorial폴더의 delegate_Tutorial_mk2프로젝트

Delegate자체를 매개변수로써 사용할 수도 있다.

예시 : CSharp_Tutorial폴더의 delegate_Tutorial_mk3프로젝트

==================================================================






